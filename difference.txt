7,8c7,8
<     int somenumarray[5];
<     int *ptr = somenumarray;
---
>     int *pointer_to_int , *new_pointer_to_int;
>     int x = 5;
10,18c10,19
<     int v =2;
<     //incrementing pointer with ptr++ to the size of its declaration
<   /*  for (;ptr < &somenumarray[5]; ptr++){
<         *ptr =v;
<         v *= 2;
<         cout << *ptr << " ";
<     }
<     cout << endl;
< */
---
>     cout << "Adress of pointer_to_int: " << &pointer_to_int << endl;
>     cout << "Adress of new_pointer_to_int: " << &new_pointer_to_int << endl;
>     cout << "Adress pointer_to_int is pointing at: " << &pointer_to_int << endl;
>     cout << "Adress new_pointer_to_int is pointing at: " << &new_pointer_to_int << endl;
>     cout << "Hence it can be seen that after initialization without assignement \n\r";
>     cout << "the pointers are pointing at themselves \n\r"<< endl;
>     
>     cout << "Adress of variable: " << &x << endl;
>     
>     pointer_to_int = &x;
20,24c21,22
<     int i;
<     for (i=0; i<5; i++){
<         somenumarray[i] = 5;
<         cout << somenumarray[i] << " ";
<     }
---
>     cout << "Adress of pointer_to_int after pointing to variable: " << &pointer_to_int << endl;
>     cout << "Adress pointer_to_int is pointing at after assignment: " << pointer_to_int << endl;
25a24,26
>     cout << "Value of variable pointed by pointer_to_int: " << *pointer_to_int << endl;
>     
>     new_pointer_to_int = pointer_to_int;  
27,31c28,29
<     //example of leaving the array bounds 
<     for (int k; k <10;k++){
<         cout << *ptr << " ";
<         ptr++;
<     }
---
>     cout << "Adress of new_pointer_to_int: " << &new_pointer_to_int << endl;
>     cout << "Adress new_pointer_to_int is pointing at: " << new_pointer_to_int << endl;
32a31
>     *new_pointer_to_int = 10;
33a33,34
>     cout << *pointer_to_int << endl;
>     cout << *new_pointer_to_int << endl;
